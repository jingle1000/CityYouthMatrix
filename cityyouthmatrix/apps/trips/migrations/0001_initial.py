# Generated by Django 3.0.7 on 2020-06-24 02:27

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityPartner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the activity partner still active')),
            ],
        ),
        migrations.CreateModel(
            name='EventAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_1', models.CharField(help_text='Street number and name', max_length=100)),
                ('address_2', models.CharField(blank=True, help_text='Apartment/suite if applicable', max_length=100)),
                ('city', models.CharField(max_length=300)),
                ('state', models.CharField(max_length=2)),
                ('zip_code', models.CharField(max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('event_datetime', models.DateTimeField(help_text='The start date and time of the event')),
                ('season', models.CharField(choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Fall', 'Fall'), ('Winter', 'Winter')], max_length=6)),
                ('activity_partner', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.DO_NOTHING, to='trips.ActivityPartner')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trips.EventAddress')),
            ],
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_location', models.CharField(blank=True, help_text='Specific pickup location at the address (front, side, etc)', max_length=100)),
                ('pickup_datetime', models.DateTimeField(db_index=True, help_text='Date and time to pickup', null=True)),
                ('pickup_completed', models.BooleanField(default=False, help_text='Was the family picked up and dropped off at the event')),
                ('pickup_completed_datetime', models.DateTimeField(help_text='Date and time the family was dropped off at the event', null=True)),
                ('pickup_driver_notes', models.CharField(blank=True, help_text='Notes about the pickup from the driver', max_length=500)),
                ('pickup_family_notes', models.CharField(blank=True, help_text='Notes about the pickup from the family', max_length=500)),
                ('return_datetime', models.DateTimeField(db_index=True, help_text='Date and time to return', null=True)),
                ('return_completed', models.BooleanField(default=False, help_text='Was the family picked up and dropped off at the return address')),
                ('return_completed_datetime', models.DateTimeField(help_text='Date and time the family was dropped off at the return address', null=True)),
                ('return_driver_notes', models.CharField(blank=True, help_text='Notes about the return from the driver', max_length=500)),
                ('return_family_notes', models.CharField(blank=True, help_text='Notes about the return from the family', max_length=500)),
                ('is_cancelled', models.BooleanField(default=False, help_text='Was the trip cancelled')),
                ('cancelled_datetime', models.DateTimeField(help_text='Date and time the trip was cancelled', null=True)),
                ('car_seat_required', models.BooleanField(default=False)),
                ('booster_seat_required', models.BooleanField(default=False)),
                ('special_needs', models.CharField(blank=True, help_text='Any special needs of the family', max_length=300)),
                ('next_required_datetime', models.DateTimeField(db_index=True, help_text='Internal field for sorting', null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trips.Event')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Family')),
                ('passengers', smart_selects.db_fields.ChainedManyToManyField(chained_field='family', chained_model_field='family', to='accounts.FamilyMember')),
                ('pickup_address', smart_selects.db_fields.ChainedForeignKey(chained_field='family', chained_model_field='family', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.FamilyAddress')),
                ('pickup_driver', models.ForeignKey(limit_choices_to={'is_verified': True}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='pickup_driver', to='accounts.Driver')),
                ('return_address', smart_selects.db_fields.ChainedForeignKey(chained_field='family', chained_model_field='family', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.FamilyAddress')),
                ('return_driver', models.ForeignKey(limit_choices_to={'is_verified': True}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='return_driver', to='accounts.Driver')),
            ],
            options={
                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('next_required_datetime'), nulls_last=True)],
                'unique_together': {('event', 'family')},
            },
        ),
    ]
